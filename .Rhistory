html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <- data.frame(rank=rank, stock=stock, price=price)
return(stockDF)
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
View(stockDF)
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <- data.frame(rank=rank, stock=stock, price=price)
return(stockDF)
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=rank, stock=stock, price=price)# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
View(stockDF)
head(stockDF)
str(stockDF)
# yahooRankParser
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
str(stockDF)
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=as.character(stock), price=as.numeric(price))# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
str(stockDF)
# yahooRankParser
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
str(stockDF)
stockDF[,"stock"]
strsplit(stockDF[,"stock"], ' ')
strsplit(stockDF[,"stock"], " ")
stockCD <- grep("[0-9]+", stockDF[, "stock"], fixed=FALSE)
stockCD
stockCD <- substr(stockDF[, "stock"], 1, 4)
stockName <- strsplit(stockDF[, "stock"], " ")
stockName <- grep("![0-9]+"", stockDF[, "stock"])
stockName <- grep("^[0-9]+"", stockDF[, "stock"])
stockName <- grep("^[0-9]+", stockDF[, "stock"], perl=TRUE, value=TRUE)
stockName <- grep("![0-9]+", stockDF[, "stock"], perl=TRUE, value=TRUE)
stockName <- str_extract("^[0-9]+", stockDF[, "stock"])
library(stringr)
stockName <- str_extract("^[0-9]+", stockDF[, "stock"])
stockName <- str_extract("^[0-9]+", as.string(stockDF[, "stock"]))
stockName <- str_extract("^[0-9]+", as.character(stockDF[, "stock"]))
stockName <- str_extract("![0-9]+", as.character(stockDF[, "stock"]))
stockName <- str_extract("[^0-9]+", as.character(stockDF[, "stock"]))
stock <- as.character(stockDF[, "stock"])
stockCD <- substr(stock, 1, 4)
stockName <- str_extract("[^0-9]+", stock)
stockName <- grep("[0-9]+", stock, value=TRUE)
stockName <- grep("[^0-9]", stock, value=TRUE)
```
stockName <- grep("[^0-9]", stock, value=TRUE)
stockName <- grep("[^0-9]+", stock, value=TRUE)
```
stockName <- grep("[^0-9]+", stock, value=TRUE)
stockName <- grep("[0-9]+", stock, value=TRUE)
stockName <- grep("[^0-^9]+", stock, value=TRUE)
stockName <- grep("^0", stock, value=TRUE)
stockName <- grep("[^0]", stock, value=TRUE)
stockName
stockName <- grep("\D", stock, value=TRUE)
stockName <- grep("[:digit:]", stock, value=TRUE)
stockName <- grep("[0:9]", stock, value=TRUE)
stockName <- grep("[0-9]", stock, value=TRUE)
stockName <- grep("[0:9]", stock, value=TRUE)
stockName <- grep("[0-9]", stock, value=TRUE)
stockName <- grep("[0:9]", stock, value=TRUE)
stockName
stockName <- substr(stock, 6)
stockName <- substr(stock, 6, 4)
stockName <- substr(stock, 5, 4)
stockName <- substr(stock, 4, 4)
stockName <- str_match(stock, "[^0-9]")
stockName <- str_extract(stock, "[^0-9]")
stockName
stock[1]
substr(stock[1], 6, 3)
substr(stock[1], 5, 3)
substr(stock[1], 1, length(stock[1]))
length(stock[1])
nchar(stock[1])
stockName <- substr(stock, 6, nchar(stock))
# yahooRankParser
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <<- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <<- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
# yahooRankParser
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
dataCollection1 <- function(language, path, rowsPrint){
Sys.setlocale(category="LC_ALL", locale=language)
data <- read.csv(path, stringsAsFactors=FALSE)
data <<- read.csv(path, stringsAsFactors=FALSE)
headRows <- head(data, rowsPrint)
return (headRows)
}
dataCollection1(language="cht", path="C:/NTUTrainRL1/data/funCoastAccident.csv", rowsPrint=10)
View(stockDF)
# yahooRankParser
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
rank <<- rank
price <<- price
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
head(stockDF)
stockDFSplit <- function(){
stock <- as.character(stockDF[, "stock"])
stockCD <- substr(stock, 1, 4)
stockName <- substr(stock, 6, nchar(stock))
stockRank <- stockDF[, "rank"]
stockPrice <- stockDF[, "price"]
stockDFSplit <<- data.frame(rank=stockRank, price=stockPrice, code=stockCD, name=stockName)
}
stockDFSplit <- function(){
stock <- as.character(stockDF[, "stock"])
stockCD <- substr(stock, 1, 4)
stockName <- substr(stock, 6, nchar(stock))
stockRank <- stockDF[, "rank"]
stockPrice <- stockDF[, "price"]
stockDFSplit <<- data.frame(rank=stockRank, price=stockPrice, code=stockCD, name=stockName)
return(stockDFSplit)
}
stockDFSplit()
stockDFSplit <- function(){
stock <- as.character(stockDF[, "stock"])
stockCD <- substr(stock, 1, 4)
stockName <- substr(stock, 6, nchar(stock))
stockRank <- stockDF[, "rank"]
stockPrice <- stockDF[, "price"]
stockDFSplit <<- data.frame(rank=stockRank, name=stockName, price=stockPrice, code=stockCD)
return(stockDFSplit)
}
stockDFSplit()
library(plotly)
install.packages("plotly")
library(plotly)
plot_ly(stockDFSplit, x=code, y=price)
plot_ly(stockDFSplit, x=as.factor(code), y=price)
plot_ly(stockDFSplit, x=code, y=price, type="bar")
plot_ly(z = volcano, type = "surface")
q()
yahooRankParser <- function(URL, xpathRank, xpathStock, xpathPrice){
doc <- read_html(URL)
#columns <- c(xpathRank, xpathStock, xpathPrice)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockDF <<- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to global environment
}
# Declaring function parameters
libVectors <- c("magrittr", "rvest")
URL <- "https://tw.stock.yahoo.com/d/i/rank.php?t=pri&e=tse"
xpathRank <- "//table[2]/tbody/tr/td[1]"
xpathStock <- "//tbody/tr/td[@class='name']"
xpathPrice <- "//table[2]/tbody/tr/td[3]"
# Executing functions
neccessaryLibs(libVectors)
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
library(rvest)
yahooRankParser(URL, xpathRank, xpathStock, xpathPrice)
stockDFSplit <- function(){
stock <- as.character(stockDF[, "stock"])
stockCD <- substr(stock, 1, 4)
stockName <- substr(stock, 6, nchar(stock))
stockRank <- stockDF[, "rank"]
stockPrice <- stockDF[, "price"]
stockDFSplit <<- data.frame(rank=stockRank, name=stockName, price=stockPrice, code=stockCD)
return(stockDFSplit)
}
stockDFSplit()
plot_ly(stockDFSplit, x=code, y=price, type="bar")
library(plotly)
plot_ly(stockDFSplit, x=code, y=price, type="bar")
plot_ly(stockDFSplit, x=name, y=price, type="bar")
plot_ly(stockDFSplit, x=name, y=price, type="bar", color=name)
library(leaflet)
install.packages("leaflet")
library(leaflet)
helloMap <- leaflet() %>%
addTiles() %>% #把預設的地圖圖層加入
addMarkers(lng=121.539366, lat=25.017326, popup="National Taiwan University")
helloMap
Sys.setlocale(category = "LC_ALL", locale = "cht")
data <- read.csv("C:/NTUTrainRL1/data/funCoastAccident.csv", stringsAsFactors=FALSE)
head(data, 10)
helloMap <- leaflet() %>%
addTiles() %>% #把預設的地圖圖層加入
addMarkers(lng=121.539366, lat=25.017326, popup="台大")
helloMap
helloMap <- leaflet() %>%
addTiles() %>% #把預設的地圖圖層加入
addMarkers(lng=121.539366, lat=25.017326, popup="台灣大學")
helloMap
View(data)
dataComplete <- complete.cases(data)
dataComplete <- data[complete.cases(data), ]
View(dataComplete)
View(dataComplete)
ggplot(dataComplete, aes(x="年齡"))+
geom_histogram(fill="pink", colour="black")+
facet_grid(縣市別)
ggplot(dataComplete, aes(x="年齡"))+
geom_histogram(fill="pink", colour="black")+
facet_grid(醫療檢傷~.)
colnames(data) <- c("number", "city", "hospital", "gender", "nationality", "age", "medLV1", "medLV2")
dataComplete <- data[complete.cases(data), ]
ggplot(dataComplete, aes(x="age"))+
geom_histogram(fill="pink", colour="black")+
facet_grid(medLV1~.)
str(data)
hist(data$age)
facet_grid(medLV1~.)
ggplot(dataComplete, aes(x=age))+
geom_histogram(fill="pink", colour="black")+
facet_grid(medLV1~.)
ggplot(dataComplete, aes(x=age))+
geom_histogram(fill="pink", colour="black")+
facet_grid(medLV2~.)
max(data$age)
summary(data$age)
str(cars)
plot(cars)
plot_ly(cars, x=speed, y=dist, type="scatter")
plot_ly(cars, x=speed, y=dist, type="scatter", mode="markers")
fit <- lm(dist~speed)
fit <- lm(cars$dist~cars$speed)
scatterPlot <- plot_ly(cars, x=speed, y=dist, type="scatter", mode="markers")
scatterPlot <- add_trace(scatterPlot, y=fitted(fit), name="linear model")
scatterPlot
scatterPlot <- plot_ly(cars, x=speed, y=dist, type="scatter", mode="markers")
scatterPlot
fit <- lm(cars$dist~cars$speed)
scatterPlot <- add_trace(scatterPlot, y=fitted(fit), name="linear model", mode="lines")
scatterPlot
str(cars)
scatterPlot <- plot_ly(cars, x=speed, y=dist, type="scatter", mode="markers", name="raw")
scatterPlot
fit <- lm(cars$dist~cars$speed)
scatterPlot <- add_trace(scatterPlot, y=fitted(fit), name="linear model", mode="lines")
scatterPlot
scatterPlot <- plot_ly(cars, x=speed, y=dist, type="scatter", mode="markers", name="data points")
scatterPlot
fit <- lm(cars$dist~cars$speed)
scatterPlot <- add_trace(scatterPlot, y=fitted(fit), name="linear model", mode="lines")
scatterPlot
scatterPlot <- add_trace(scatterPlot, y=fitted(fit), name="linear model", mode="markers+lines")
scatterPlot
scatterPlot <- plot_ly(cars, x=speed, y=dist, type="scatter", mode="markers", name="data points")
scatterPlot
fit <- lm(cars$dist~cars$speed)
scatterPlot <- add_trace(scatterPlot, y=fitted(fit), name="linear model", mode="lines")
scatterPlot
library(rvest)
q()
library(magrittr)
library(rvest)
library(magrittr)
library(rvest)
yahooStockRankParser <- function(n) {
if ( !n %in% 1:100 ) {
print("Parameter n should be an integer between 1 and 100")
} else {
URL <- "https://tw.stock.yahoo.com/d/i/rank.php?t=pri&e=tse&n=100"
xpathRank <- "//tbody/tr/td/table[2]/tbody/tr/td[1]"
xpathStock <- "//tbody/tr/td[@class='name']"
xpathPrice <- "//tbody/tr/td/table[2]/tbody/tr/td[3]"
doc <- read_html(URL)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockTmp <- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to local environment
head(stockTmp, n)
}
}
yahooStockRankParser(n=39)
yahooStockRankParser <- function(n) {
if ( !n %in% 1:100 ) {
print("Parameter n should be an integer between 1 and 100")
} else {
URL <- sprintf("https://tw.stock.yahoo.com/d/i/rank.php?t=pri&e=tse&n=100")
xpathRank <- "//tbody/tr/td/table[2]/tbody/tr/td[1]"
xpathStock <- "//tbody/tr/td[@class='name']"
xpathPrice <- "//tbody/tr/td/table[2]/tbody/tr/td[3]"
doc <- read_html(URL)
rank <- doc %>%
html_nodes(.,xpath = xpathRank) %>%
html_text
stock <- doc %>%
html_nodes(.,xpath = xpathStock) %>%
html_text %>%
iconv(from = "UTF-8", to = "UTF-8")
price <- doc %>%
html_nodes(.,xpath = xpathPrice) %>%
html_text
stockTmp <- data.frame(rank=as.integer(rank), stock=stock, price=as.numeric(price))# return to local environment
head(stockTmp, n)
}
}
yahooStockRankParser(n=39)
yahooStockRankParser(n=39)
library(pixmap)
install.packages("pixmap")
library(pixmap)
onePiece <- read.pnm("c:/NTUTrainRL1/image/onePiece.pgm")#把圖片指派給onePiece這個物件
onePiece#看看onePiece物件
plot(onePiece)#把onePiece物件畫出來看看
str(onePiece)#檢查onePiece物件的結構
onePiece@grey[300, 600]#看一下(300, 600)這個像素的亮度
locator()#這是R的內建函式，可以找到圖片坐標
noUsopp <- onePiece
noUsopp@grey[68.91861:301.05464, 219.0638:311.9182] <- 1#把騙人布用國防布蓋掉
plot(noUsopp)#看看結果，好像沒有蓋好蓋滿QQ
q()
summary(object = cars)
summary(cars)
head(Wage)
install.packages("ISLR")
library(ISLR)
q()
install.packages("rvest")
summaryCars <- summary(cars)
summaryCars$1
summaryCars
names(summaryCars)
as.vector(summaryCars)
summaryCars[1]
summaryCars[1][1]
summaryCars[2]
names[summaryCars]
names(summaryCars)
vectorSummaryCars <- as.vector(summaryCars)
names(vectorSummaryCars)
summaryCars$Min.
summaryCars$Min
summaryCars$Median
q()
105000+84000
q()
library(Hmisc)
datadir <- "C:/NTUTrainRL1/data"
sasexe <- "C:/Program Files/SASHome/SASFoundation/9.4/sas.exe"
accidentList <- sas.get(libraryName=datadir, member="funcoastaccident", sasprog=sasexe)
install.packages("Hmisc")
library(Hmisc)
datadir <- "C:/NTUTrainRL1/data"
sasexe <- "C:/Program Files/SASHome/SASFoundation/9.4/sas.exe"
accidentList <- sas.get(libraryName=datadir, member="funcoastaccident", sasprog=sasexe)
q()
Sys.getlocale()
setwd("C:/NTUTrainRL1")
accidentList <- read.csv("data/funCoastAccident.csv", header=TRUE, sep=",")
View(accidentList)
install.packages("xlsx")
library(xlsx)
accidentList <- read.xlsx("C:/NTUTrainRL1/data/funCoastAccident.xlsx", 1, encoding = "UTF-8")#encoding issue here
View(accidentList)
library(xlsx)
Sys.setenv(JAVA_HOME="C:/Program Files (x86)/Java/jre1.8.0_40")
library(xlsx)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files (x86)/Java/jre1.8.0_40")
library(rJava)
install.packages("Hmisc")
library(Hmisc)
datadir <- "C:/NTUTrainRL1/data"
sasexe <- "C:/Program Files/SASHome/SASFoundation/9.4/sas.exe"
accidentList <- sas.get(libraryName=datadir, member="funcoastaccident", sasprog=sasexe)
View(accidentList)
rm(accidentList)
datadir <- "C:/NTUTrainRL1/data"
sasexe <- "C:/Program Files/SASHome/SASFoundation/9.4/sas.exe"
accidentList <- sas.get(libraryName=datadir, member="funcoastaccident", sasprog=sasexe)
q()
